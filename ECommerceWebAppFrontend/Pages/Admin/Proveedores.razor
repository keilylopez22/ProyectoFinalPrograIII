@page "/admin/proveedores" 
@inject ProveedorService ProveedorService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]


<h3 class="mt-4 mb-3 text-primary fw-bold">üìã Gesti√≥n de Proveedores</h3>

<div class="row">
    <div class="col-md-5">
        <EditForm Model="@proveedor" OnValidSubmit="@GuardarProveedor">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="card shadow-sm p-4">
                <div class="mb-3">
                    <label class="form-label">Nombre</label>
                    <InputText class="form-control" @bind-Value="proveedor.Nombre" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Direcci√≥n</label>
                    <InputText class="form-control" @bind-Value="proveedor.Direccion" />
                </div>

                <div class="mb-3">
                    <label class="form-label">NIT</label>
                    <InputNumber class="form-control" @bind-Value="proveedor.Nit" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Correo Electr√≥nico</label>
                    <InputText class="form-control" type="email" @bind-Value="proveedor.CorreoElectronico" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Tel√©fono</label>
                    <InputNumber class="form-control" @bind-Value="proveedor.Telefono" />
                </div>

                <div class="d-flex gap-2">
                    <button class="btn btn-success" type="submit">
                        @((proveedor.Id == 0) ? "‚ûï Agregar" : "üîÑ Actualizar")
                    </button>
                    <button class="btn btn-secondary" type="button" @onclick="LimpiarFormulario">Cancelar</button>
                </div>
            </div>
        </EditForm>
    </div>

    <div class="col-md-7 mt-3">
        <div class="input-group mb-3">
            <span class="input-group-text">üîç Buscar</span>
            <input type="text" class="form-control" placeholder="Nombre del proveedor..." 
                   @bind="filtroNombre" />
            <button class="btn btn-outline-secondary" type="button" title="Refrescar lista" @onclick="RefrescarProveedores">
                üîÑ
            </button>
        </div>

        <table class="table table-bordered table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Nombre</th>
                    <th>Direcci√≥n</th>
                    <th>NIT</th>
                    <th>Correo</th>
                    <th>Tel√©fono</th>
                    <th class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (proveedores.Any())
                {
                    @foreach (var p in proveedores)
                    {
                        <tr>
                            <td>@p.Nombre</td>
                            <td>@p.Direccion</td>
                            <td>@p.Nit</td>
                            <td>@p.CorreoElectronico</td>
                            <td>@p.Telefono</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarProveedor(p)">‚úèÔ∏è</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => EliminarProveedor(p.Id)">üóëÔ∏è</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center">No hay proveedores que coincidan</td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- PAGINACI√ìN -->
        <div class="d-flex justify-content-between align-items-center">
            <span>Mostrando p√°gina @paginaActual</span>
            <div>
                <button class="btn btn-outline-primary me-1" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">‚¨ÖÔ∏è Anterior</button>
                <button class="btn btn-outline-primary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente ‚û°Ô∏è</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Proveedor> proveedores = new();
    private Proveedor proveedor = new();
    private string filtroNombre = string.Empty;

    // Paginaci√≥n
    private int paginaActual = 1;
    private int elementosPorPagina = 5;
    private bool hayMasPaginas = false;

    private bool PuedeAvanzar => hayMasPaginas;
    private bool PuedeRetroceder => paginaActual > 1;

    protected override async Task OnInitializedAsync()
    {
        await CargarProveedores();
    }

    private async Task CargarProveedores()
    {
        var resultado = await ProveedorService.ObtenerProveedoresAsync(filtroNombre ?? string.Empty, paginaActual, elementosPorPagina);
        proveedores = resultado.Proveedores;
        hayMasPaginas = proveedores.Count == elementosPorPagina;
    }

    private async Task GuardarProveedor()
    {
        if (proveedor.Id == 0)
        {
            await ProveedorService.CrearProveedorAsync(proveedor);
        }
        else
        {
            await ProveedorService.ModificarProveedorAsync(proveedor);
        }

        LimpiarFormulario();
        await CargarProveedores();
    }

    private void EditarProveedor(Proveedor p)
    {
        proveedor = new Proveedor
        {
            Id = p.Id,
            Nombre = p.Nombre,
            Direccion = p.Direccion,
            Nit = p.Nit,
            CorreoElectronico = p.CorreoElectronico,
            Telefono = p.Telefono
        };
    }

    private async Task EliminarProveedor(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¬øEst√°s seguro de eliminar este proveedor?");
        if (confirm)
        {
            await ProveedorService.EliminarProveedorAsync(id);
            await CargarProveedores();
        }
    }

    private void LimpiarFormulario()
    {
        proveedor = new Proveedor();
    }

    private async Task PaginaAnterior()
    {
        if (PuedeRetroceder)
        {
            paginaActual--;
            await CargarProveedores();
        }
    }

    private async Task PaginaSiguiente()
    {
        if (PuedeAvanzar)
        {
            paginaActual++;
            await CargarProveedores();
        }
    }

    private async Task RefrescarProveedores()
    {
        paginaActual = 1;
        await CargarProveedores();
    }
}
