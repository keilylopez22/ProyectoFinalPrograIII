@page "/admin/pedidos"
@using ApiECommerce.Modelo
@using ApiECommerce.DTOs
@inject PedidoService PedidoService
@inject ClienteService ClienteService
@inject ProductoService ProductoService
@inject IJSRuntime JS

<h3 class="text-center my-4">ðŸ“¦ GestiÃ³n de Pedidos</h3>

<!-- Filtros -->
<div class="card mb-3">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-2">
                <label class="form-label">ID Cliente</label>
                <input type="number" class="form-control" @bind="filtroIdCliente" placeholder="ID Cliente" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Fecha Inicio</label>
                <input type="date" class="form-control" @bind="fechaInicio" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Fecha Fin</label>
                <input type="date" class="form-control" @bind="fechaFin" />
            </div>
            <div class="col-md-4 d-flex align-items-end gap-2">
                <button class="btn btn-primary" @onclick="AplicarFiltros">
                    <i class="bi bi-search"></i> Buscar
                </button>
                <button class="btn btn-secondary" @onclick="LimpiarFiltros">
                    <i class="bi bi-x-circle"></i> Limpiar
                </button>
                <button class="btn btn-success" @onclick="NuevoPedido">
                    <i class="bi bi-plus-circle"></i> Nuevo Pedido
                </button>
            </div>
        </div>
    </div>
</div>

@if (pedidos == null)
{
    <p>Cargando pedidos...</p>
}
else
{
    <!-- Lista de Pedidos -->
    <table class="table table-hover table-bordered shadow-sm">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Cliente</th>
                <th>Fecha</th>
                <th>Estado</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pedido in pedidos)
            {
                <tr>
                    <td>@pedido.Id</td>
                    <td>@pedido.Cliente?.Nombre</td>
                    <td>@pedido.Fecha.ToShortDateString()</td>
                    <td>
                        <span class="badge bg-@GetEstadoClass(pedido.Estado)">
                            @pedido.Estado
                        </span>
                    </td>
                    <td>@pedido.Total.ToString("C")</td>
                    <td>
                        <button class="btn btn-info btn-sm me-1" @onclick="() => VerDetalles(pedido)">
                            <i class="bi bi-eye"></i> Ver
                        </button>
                        <button class="btn btn-warning btn-sm me-1" @onclick="() => EditarPedido(pedido)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarPedido(pedido.Id)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- PaginaciÃ³n -->
    <div class="d-flex justify-content-between align-items-center">
        <div>
            Mostrando @((paginaActual - 1) * tamanioPagina + 1) - @Math.Min(paginaActual * tamanioPagina, totalRegistros) 
            de @totalRegistros registros
        </div>
        <nav>
            <ul class="pagination">
                <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual - 1)">
                        Anterior
                    </button>
                </li>
                @for (int i = 1; i <= totalPaginas; i++)
                {
                    var numeroPagina = i;
                    <li class="page-item @(paginaActual == numeroPagina ? "active" : "")">
                        <button class="page-link" @onclick="() => CambiarPagina(numeroPagina)">
                            @numeroPagina
                        </button>
                    </li>
                }
                <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual + 1)">
                        Siguiente
                    </button>
                </li>
            </ul>
        </nav>
    </div>

       <!-- Modal para Cambiar Estado -->
    @if (mostrarModalEstado)
    {
        <div class="modal" tabindex="-1" style="display:block; background-color: rgba(0,0,0,0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Cambiar Estado del Pedido #@pedidoIdSeleccionado</h5>
                        <button type="button" class="btn-close" @onclick="() => mostrarModalEstado = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Estado:</label>
                            <select class="form-select" @bind="nuevoEstadoSeleccionado">
                                <option value="Pendiente">Pendiente</option>
                                <option value="Enviado">Enviado</option>
                                <option value="Completado">Entregado</option>
                                <option value="Cancelado">Cancelado</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => mostrarModalEstado = false">
                            Cancelar
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="GuardarNuevoEstado">
                            Guardar
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop show"></div>
    }

    <!-- Modal para Ver Detalles -->
    @if (mostrarDetalles)
    {
        <div class="modal" tabindex="-1" style="display:block; background-color: rgba(0,0,0,0.5)">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Detalles del Pedido #@pedidoSeleccionado.Id</h5>
                        <button type="button" class="btn-close" @onclick="CerrarDetalles"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row mb-3">
                            <div class="col">
                                <strong>Cliente:</strong> @pedidoSeleccionado.Cliente?.Nombre
                            </div>
                            <div class="col">
                                <strong>Fecha:</strong> @pedidoSeleccionado.Fecha.ToShortDateString()
                            </div>
                            <div class="col">
                                <strong>Estado:</strong> 
                                <span class="badge bg-@GetEstadoClass(pedidoSeleccionado.Estado)">
                                    @pedidoSeleccionado.Estado
                                </span>
                            </div>
                        </div>

                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Producto</th>
                                    <th>Cantidad</th>
                                    <th>Precio</th>
                                    <th>Subtotal</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in pedidoSeleccionado.DetallesPedido)
                                {
                                    <tr>
                                        <td>@detalle.Producto?.Nombre</td>
                                        <td>@detalle.CantidadProductos</td>
                                        <td>@detalle.Producto?.Precio.ToString("C")</td>
                                        <td>@((detalle.CantidadProductos * detalle.Producto?.Precio ?? 0).ToString("C"))</td>
                                    </tr>
                                }
                                <tr class="table-info">
                                    <td colspan="3" class="text-end"><strong>Total:</strong></td>
                                    <td><strong>@pedidoSeleccionado.Total.ToString("C")</strong></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Pedido>? pedidos;
    private List<Cliente> clientes = new();
    private List<Producto> productos = new();
    private Pedido pedidoSeleccionado = new();
    private List<DetallePedido> detallesPedido = new();
    private int? filtroIdCliente;
    private DateTime? fechaInicio;
    private DateTime? fechaFin;
    private bool mostrarFormulario;
    private bool mostrarDetalles;
    private int paginaActual = 1;
    private int tamanioPagina = 10;
    private int totalRegistros;
    private int totalPaginas;
    private int pedidoIdSeleccionado;
    private string nuevoEstadoSeleccionado = "";
    private bool mostrarModalEstado;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var resultadoClientes = await ClienteService.ObtenerClientesAsync(
                filtro: "",
                pagina: 1,
                porPagina: 100
            );
            clientes = resultadoClientes.Clientes;
            
            productos = await ProductoService.ObtenerProductosAsync();
            await CargarPedidos();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar datos: {ex.Message}");
        }
    }

    private async Task AplicarFiltros()
    {
        paginaActual = 1; 
        await CargarPedidos();
    }

    private async Task LimpiarFiltros()
    {
        filtroIdCliente = null;
        fechaInicio = null;
        fechaFin = null;
        paginaActual = 1;
        await CargarPedidos();
    }

    private async Task CargarPedidos()
    {
        try
        {
            pedidos = await PedidoService.ObtenerPedidosAsync(
                idCliente: filtroIdCliente,    
                fechaInicio: fechaInicio,
                fechaFin: fechaFin,
                pageNumber: paginaActual,
                pageSize: tamanioPagina
            );
                
            if (pedidos != null && pedidos.Any())
            {
                totalRegistros = pedidos.Count;
                totalPaginas = (int)Math.Ceiling(totalRegistros / (double)tamanioPagina);
            }
            else
            {
                pedidos = new List<Pedido>();
                totalRegistros = 0;
                totalPaginas = 1;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en CargarPedidos: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Error al cargar pedidos: {ex.Message}");
            pedidos = new List<Pedido>();
        }
    }

    private async Task CambiarPagina(int numeroPagina)
    {
        if (numeroPagina >= 1 && numeroPagina <= totalPaginas)
        {
            paginaActual = numeroPagina;
            await CargarPedidos();
        }
    }

    //Metodo para crear un nuevo pedido
    private void NuevoPedido()
    {
       
    }

    //Metodo para guardar un nuevo pedido
    private async Task GuardarPedido()
    {
        
    }

    private void EditarPedido(Pedido pedido)
    {
    pedidoIdSeleccionado = pedido.Id;
    nuevoEstadoSeleccionado = pedido.Estado;
    mostrarModalEstado = true;
    StateHasChanged();
    }

   private async Task GuardarNuevoEstado()
    {
        try
        {
            if (string.IsNullOrEmpty(nuevoEstadoSeleccionado))
            {
                await JS.InvokeVoidAsync("alert", "Debe seleccionar un estado");
                return;
            }

            // Validar transiciones de estado
            var estadoActual = pedidos.FirstOrDefault(p => p.Id == pedidoIdSeleccionado)?.Estado;
            if (estadoActual != null)
            {
                bool transicionNoPermitida = false;

                switch (estadoActual.ToLower())
                {
                    case "enviado" when nuevoEstadoSeleccionado.ToLower() == "pendiente":
                        transicionNoPermitida = true;
                        await JS.InvokeVoidAsync("alert", "No se puede regresar a pendiente una vez enviado");
                        break;
                    case "entregado":
                        transicionNoPermitida = true;
                        await JS.InvokeVoidAsync("alert", "No se puede modificar el estado de un pedido entregado");
                        break;
                    case "cancelado":
                        transicionNoPermitida = true;
                        await JS.InvokeVoidAsync("alert", "No se puede modificar el estado de un pedido cancelado");
                        break;
                }

                if (transicionNoPermitida)
                {
                    return;
                }
            }

            var resultado = await PedidoService.ActualizarEstadoPedidoAsync(pedidoIdSeleccionado, nuevoEstadoSeleccionado);
            if (resultado)
            {
                await CargarPedidos();
                mostrarModalEstado = false;
                pedidoIdSeleccionado = 0;
                nuevoEstadoSeleccionado = "";
                await JS.InvokeVoidAsync("alert", "Estado actualizado correctamente");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar estado: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Error al actualizar el estado: {ex.Message}");
        }
    }

    private void VerDetalles(Pedido pedido)
    {
        pedidoSeleccionado = pedido;
        mostrarDetalles = true;
    }

    private void CerrarDetalles()
    {
        mostrarDetalles = false;
        pedidoSeleccionado = new();
    }

    private async Task EliminarPedido(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Â¿EstÃ¡ seguro de eliminar este pedido?"))
        {
            try
            {
                await PedidoService.EliminarPedidoAsync(id);
                await CargarPedidos();
                await JS.InvokeVoidAsync("alert", "Pedido eliminado correctamente");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar el pedido: {ex.Message}");
            }
        }
    }

    private void AgregarDetalle()
    {
        detallesPedido.Add(new DetallePedido());
    }

    private void EliminarDetalle(DetallePedido detalle)
    {
        detallesPedido.Remove(detalle);
    }

    private void CerrarFormulario()
    {
        mostrarFormulario = false;
        pedidoSeleccionado = new();
        detallesPedido.Clear();
    }

    private string GetEstadoClass(string estado) => estado switch
    {
        "Pendiente" => "warning",
        "Enviado" => "info",
        "Entregado" => "success",
        "Cancelado" => "danger",
        _ => "secondary"
    };
}